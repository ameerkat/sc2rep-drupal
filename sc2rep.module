<?php
	/**
	 * StarCraft 2 Replay / Drupal Integration
	 * Get's metadata from sc2replays via phpsc2rep library, stores metadata
	 * into custom tables upon FileField upload, displays information on node
	 * view and exposes the information to views module.
	 *
	 * @author Ameer Ayoub <ameer.ayoub@gmail.com>
	 * @modified 2010/11/4
	 * @todo views integrations
	 */
	 
	require("lib/phpsc2replay/mpqfile.php");
	
	/**
	 * Helper function, get a maps id by map name
	 */
	function sc2rep_get_map_by_id($name){
		if($name != null){
			$result = db_query("SELECT * FROM {sc2rep_maps} WHERE name = '%s'", $name);
			$data = db_fetch_array($result);
			if($data){
				return $data['mid'];
			} else {
				$map = array(
					"name" => $name,
					"minimap" => $name.".jpg",
				);
				drupal_write_record('sc2rep_maps', $map);
				$db_result = db_query("SELECT * FROM {sc2rep_maps} WHERE name = '%s'", $name);
				$data = db_fetch_array($db_result);
				return $data['mid'];
			}
		} else {
			return 0;
		}
	}
	
	/**
	 * Helper function, fills an array of metadata, we don't modify file here
	 * we just pass back metadata for the caller.
	 */
	function sc2rep_meta($file){
		$mpqfile = new MPQFile($file->filepath);
		if($mpqfile->getVersion() == 0){
			return null;
		}
		$replay = $mpqfile->parseReplay();
		// Fill in metadata array for meta table entry
		$result['meta'] = array(
			"fid"			=> $file->fid,
			"mid"			=> sc2rep_get_map_by_id($replay->getMapName()),
			"major_version" => $replay->getVersion(),
			"minor_version" => $replay->getBuild(),
			"team_size"		=> $replay->getTeamSize(),
			"speed"			=> $replay->getGameSpeed(),
			"length"		=> $replay->getGameLength());
		// Fill in games array for games table entries, note we need to
		// replace the game id after we insert the metadata entry
		$players = $replay->getPlayers();
		foreach ($players as $player){
			$result['games'][] = array(
				"gid"			=> 0,
				"bnet_uid"		=> $player['uid'],
				"player_name"	=> 
					isset($player['name']) ? $player['name'] : null,
				"team"			=> 
					isset($player['team']) ? $player['team'] : null,
				"color"			=>
					isset($player['color']) ? $player['color'] : null,
				"race"			=>
					isset($player['lrace']) ? $player['lrace'] : null,
				"isComputer"	=>
					isset($player['isComp']) ? $player['isComp'] : null,
				"difficulty"	=>
					isset($player['difficulty']) ? $player['difficulty'] : null,
				"apm"			=>
					isset($player['apm']) ? $player['apm'] : null,
				"handicap"		=>
					isset($player['handicap']) ? $player['handicap'] : null,
				"won"			=>
					isset($player['won']) ? $player['won'] : null);
		}
		$db_result = db_query("SELECT * FROM {sc2rep_maps} WHERE mid = %d", $result['meta']['mid']);
		$result['map'] = db_fetch_array($db_result);
		return $result;
	}
	
	/**
	 * Implementation of custom content type for starcraft replays
	 * Everything below is to create the content type in drupal
	 */
	 
	/*
	 * Implementation of hook_node_info()
	 */
	function sc2rep_node_info(){
		return array(
			"screp"	=> array(
				"name" => t("StarCraft 2 Replay"),
				"module" => "sc2rep",
				"description" => "A valid StarCraft 2 MoPaQ formatted .SC2Replay file.",
			)
		);
	}

	/**
	 * Implementation of hook_perm()
	 */
	function sc2rep_perm() {
		return array("create replays", "edit replays", "edit own replays", "delete replays", "delete own replays", "administer sc2rep module");
	}
	
	/**
	 * Implementation of hook_access()
	 */
	function sc2rep_access($op, $node, $account){
		if($op == 'create') {
			return user_access('create replays', $account);
		}
		if($op == 'update') {
			if(user_access('edit replays', $account)){
				return TRUE;
			} else if(user_access('edit own replays', $account) && ($account->uid == $node->uid)) {
				return TRUE;
			} else {
				return FALSE;
			}
		}
		if($op == 'delete') {
			if(user_access('delete replays', $account)){
				return TRUE;
			} else if(user_access('delete own replays', $account) && ($account->uid == $node->uid)) {
				return TRUE;
			} else {
				return FALSE;
			}
		}
	}
	
	/*
	 * Implementation of hook_form()
	 */
	function sc2rep_form(&$node, $form_state){
		$type = node_get_types('type', $node);
		
		$form['#attributes'] = array('enctype' => "multipart/form-data");
		
		$form['title'] = array(
			'#type' => 'textfield',
			'#title' => t("Replay Title"),
			'#description' => t("Unique title for this replay"),
			'#required' => TRUE,
			'#default_value' => $node->title,
			'#weight' => -5
		);
		
		$form['replay'] = array(
			'#type' => 'file',
			'#title' => t("Replay File"),
			'#required' => FALSE,
			'#size' => 40,
			'#description' => t("Valid StarCraft2 replay file"),
			'#weight' => -4
		);
		
		$disabled = FALSE;
		$description_extra = "";
		if(variable_get('show_winner_global', 0) == 1){
			$disabled = TRUE;
			$description_extra = " Always show winner is currently enabled from the module configuration.";
		}
		
		$db_result = db_query("SELECT show_winner FROM {sc2rep_metadata} WHERE nid = %d", $node->nid);
		$info = db_fetch_array($db_result);
		
		$form['show_winner'] = array(
			'#type' => 'checkbox',
			'#title' => t("Show Winner?"),
			'#description' => t("Whether or not to show winner.".$description_extra),
			'#default_value' => $info['show_winner'],
			'#disabled' => $disabled,
			'#required' => FALSE,
			'#weight' => -3
		);
		
		$form['body'] = array(
			'#type' => 'textarea',
			'#title' => t("Replay Description"),
			'#description' => t("Short description of this replay"),
			'#default_value' => $node->body,
			'#required' => FALSE,
			'#weight' => -2
		);
		
		$form['body_filter']['filter'] = filter_form($node->format);
		
		// Add custom form submit handler
		$form['#submit'][] = 'sc2rep_form_submit';
		
		return $form;
	}
	
	function sc2rep_form_submit($form, &$form_state) {
		if($file = file_save_upload('replay', array(), 'replays/', FALSE)){
			$form_state['values']['replay'] = $file;
			drupal_set_message(t('The replay was uploaded succesfully.'));
		} else {
			drupal_set_message(t('The replay failed to upload, please try again.'));
		}
	}

	function sc2rep_insert($node){
		// Insert metadata info into the database
		$file = $node->replay;
		if(!empty($file->fid)){
			if(strcasecmp(end(preg_split("/\./i", $file->filename)), "SC2Replay") == 0){
				// TODO Validate the replay besides just looking at the extension
				$result = sc2rep_meta($file);
				if($result != null){
					// Insert metadata into metadata table
					$result['meta']['show_winner'] = $node->show_winner;
					$result['meta']['nid'] = $node->nid;
					drupal_write_record('sc2rep_metadata', $result['meta']);
					// Get the gid back from the newly inserted metadata
					$db_result = db_query("SELECT * FROM {sc2rep_metadata} WHERE nid = %d", $node->nid);
					$data = db_fetch_array($db_result);
					$gid = $data['gid'];
					$player_array = $result['games'];
					foreach ($player_array as $game){
						$game['gid'] = $gid;
						drupal_write_record('sc2rep_games_players_join', $game);
					}
				} else {
					// File is invalid sc2replay so we don't do anything
				}
			} else {
				// File is not an sc2replay so we don't do anything
			}
		}
	}
	
	function sc2rep_load_info($node){
		// TODO Load up the metadata and give it to the node
		$result = db_query("SELECT * FROM {sc2rep_metadata} WHERE nid = %d", $node->nid);
		$data = db_fetch_array($result); 
		$to_return['meta'] = $data;
		if ($data){
			$result = db_query("SELECT * FROM {sc2rep_games_players_join} WHERE gid = %d", $data['gid']);
			while($game_data = db_fetch_array($result)){
				// Data now contains the information of one player in one game
				$to_return['players'][] = $game_data;
			}
			$result = db_query("SELECT * FROM {sc2rep_maps} WHERE mid = %d", $data['mid']);
			$to_return['map'] = db_fetch_array($result);
		} else {
			return null;
		}
		return $to_return;
	}
	
	function sc2rep_update($node){
		/* Todo handle no file change */
		sc2rep_delete($node);
		sc2rep_insert($node);
	}
	
	function sc2rep_delete($node){
		// We can't delete from multiple tables in one query?
		// So we have to grab the gid separately and then use it to remove
		// the corresponding {games_sc2rep} entries.
		$db_result = db_query("SELECT * FROM {sc2rep_metadata} WHERE nid = %d", $node->nid);
		$data = db_fetch_array($db_result);
		if($data){
			db_query('DELETE FROM {sc2rep_metadata} WHERE nid = %d', $node->nid);
			db_query('DELETE FROM {sc2rep_games_players_join} WHERE gid = %d', $data['gid']);
		}
	}
	
	function template_preprocess_metadata_sc2rep(&$variables){
		$count = 0;
		foreach($variables['metadata']['players'] as $player){
			$variables['metadata']['players'][$count]['sc2ranks_profile_url'] = 'http://www.sc2ranks.com/us/' .
			$player['bnet_uid'] . '/' .
			$player['player_name'] . '/';
			
			$variables['metadata']['players'][$count]['bnet_profile_url'] = 'http://us.battle.net/sc2/en/profile/' .
			$player['bnet_uid'] . '/1/' . 
			$player['player_name'] . '/';
			
			$variables['metadata']['players'][$count]['race_image_url'] = base_path() . 
			drupal_get_path('module', 'sc2rep') . "/images/icon-race-" .
			strtolower($player['race']) . ".jpg";
		
			$count++;
		}
		
		$variables['show_winner'] = FALSE;
		if(variable_get("show_winner_global", 0) == 1 || $variables['metadata']['meta']['show_winner'] == 1){
			$variables['show_winner'] = TRUE;
		}
		
		$variables['minimap_url'] = base_path() . 
		drupal_get_path('module', 'sc2rep') . "/images/maps/" .
		$variables['metadata']['map']['minimap'];
		
		$image_path = drupal_get_path('module', 'sc2rep')."/images/maps/".
		$variables['metadata']['map']['minimap'];
		// Set default image if the image isn't there
		$default_image = variable_get("default_map_image", "NA.jpg");
		if(!file_exists($image_path)){
			$variables['minimap_url'] = base_path() . 
			drupal_get_path('module', 'sc2rep') . "/images/maps/".$default_image;
		}
		
		if(!$variables['metadata']['meta']['team_size']){
			$variables['metadata']['meta']['team_size'] = "1v1";
		}
		
		$minutes = round($variables['metadata']['meta']['length'] / 60);
		$seconds = str_pad($variables['metadata']['meta']['length'] % 60, 2, "0");
		$variables['metadata']['meta']['formatted_length'] = $minutes . " : " . $seconds;
		
		$variables['sc2ranks_icon_url'] = base_path() . 
		drupal_get_path('module', 'sc2rep') . "/images/sc2ranks-icon.png";
			
		$variables['bnet_icon_url'] = base_path() . 
		drupal_get_path('module', 'sc2rep') . "/images/bnet-icon.png";
		
		$variables['check_icon_url'] = base_path() . 
		drupal_get_path('module', 'sc2rep') . "/images/check.png";
	}
	
	function sc2rep_theme(){
		return array(
			'metadata_sc2rep' => array(
				'template' => 'metadata-sc2rep',
				'arguments' => array('metadata' => NULL),
			),
		);
	}
	
	function sc2rep_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL){
		if($node->type == "screp" && $op == 'view'){
			$metadata = sc2rep_load_info($node);
			$node->content['replay_metadata'] = array(
				'#value' => theme('metadata_sc2rep', $metadata),
				'#weight' => 10,
			);
		}
	}

	/**
	 * Administrator Settings
	 */
	 
	/**
	 * Implementation of hook_menu()
	 */
	function sc2rep_menu() {
		$items = array();
		$items['admin/settings/sc2rep'] = array(
			'title' => 'Sc2rep settings',
			'description' => 'Set sc2ranks integration, default map image, etc.',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('sc2rep_admin'),
			'access arguments' => array('administer sc2rep module'),
			'type' => MENU_NORMAL_ITEM,
		);
		return $items;
	}
	
		/**
	 * Implementation of hook_admin()
	 */
	function sc2rep_admin() {
		$form = array(
			'default_map_image' => array(
				'#type'	=> 'textfield',
				'#title' => t('Default map image'),
				'#default_value' => variable_get('default_map_image', "NA.jpg"),
				'#maxlength' => 255,
				'#description' => 'The default map that gets displayed if an appropriate map file is not found.',
				'#required' => FALSE
			),
			'sc2ranks_integration' => array(
				'#type'	=> 'checkbox',
				'#title' => t('Enable sc2ranks integration'),
				'#default_value' => variable_get('sc2ranks_integration', 1),
				'#description' => 'Whether or not to enable features to integrate sc2ranks data into the map metadata display.',
				'#required' => FALSE
			),
			'show_winner_global' => array(
				'#type'	=> 'checkbox',
				'#title' => t('Always show winner'),
				'#default_value' => variable_get('show_winner_global', 0),
				'#description' => 'Whether or not to display the winner on all replays, over rides individual replay settings. This is dependent on phpsc2replay identifying the replay.',
				'#required' => FALSE
			),
		);
		
		return system_settings_form($form);
	}
